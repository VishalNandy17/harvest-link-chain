import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { UserRole } from '@/lib/types';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { cn } from '@/lib/utils';
import { Package, TrendingUp, QrCode, BarChart3, DollarSign, ShieldCheck, ShoppingCart, Truck, History, Loader2 } from 'lucide-react';
import { blockchainService, type Product, type Batch } from '@/lib/blockchain';
import { QRCodeGenerator } from '@/components/QRCodeGenerator';
import { toast } from '@/components/ui/use-toast';

interface InventoryItem {
  id: number;
  product: string;
  quantity: string;
  source: string;
  purchaseDate: string;
  expiryDate: string;
  price: string;
  verified: boolean;
  farmerShare: string;
  batchId: number;
  status: 'in-stock' | 'low-stock' | 'out-of-stock';
}

const RetailerDashboard = () => {
  const { user, profile, userRole, loading } = useAuth();
  const navigate = useNavigate();
  
  // State
  const [isVerifyDialogOpen, setIsVerifyDialogOpen] = useState(false);
  const [isPaymentDialogOpen, setIsPaymentDialogOpen] = useState(false);
  const [isQRScannerOpen, setIsQRScannerOpen] = useState(false);
  const [currentProduct, setCurrentProduct] = useState<InventoryItem | null>(null);
  const [inventory, setInventory] = useState<InventoryItem[]>([]);
  const [purchaseHistory, setPurchaseHistory] = useState<any[]>([]);
  const [batches, setBatches] = useState<Batch[]>([]);
  const [walletConnected, setWalletConnected] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [verificationResult, setVerificationResult] = useState<{
    valid: boolean;
    message: string;
    product?: Product;
    owners?: string[];
  } | null>(null);
  
  // Mock data for demonstration
  const mockInventory: InventoryItem[] = [
    { 
      id: 1, 
      product: 'Wheat Flour', 
      quantity: '200 kg', 
      source: 'Ramesh Kumar (Farmer) → Agri Distributors', 
      purchaseDate: '2023-10-20', 
      expiryDate: '2024-01-20',
      price: '₹25/kg',
      verified: true,
      farmerShare: '80%',
      batchId: 1,
      status: 'in-stock'
    },
    { 
      id: 2, 
      product: 'Basmati Rice', 
      quantity: '50 kg', 
      source: 'Suresh Farms → City Distributors', 
      purchaseDate: '2023-10-22', 
      expiryDate: '2024-04-22',
      price: '₹60/kg',
      verified: true,
      farmerShare: '75%',
      batchId: 2,
      status: 'low-stock'
    },
    { 
      id: 3, 
      product: 'Organic Tomatoes', 
      quantity: '100 kg', 
      source: 'Green Valley Farms → Fresh Distributors', 
      purchaseDate: '2023-10-25', 
      expiryDate: '2023-11-10',
      price: '₹40/kg',
      verified: false,
      farmerShare: '85%',
      batchId: 3,
      status: 'in-stock'
    },
  ];

  const mockPurchaseHistory = [
    { id: 1, date: '2023-10-20', product: 'Wheat Flour', quantity: '200 kg', amount: '₹5,000', status: 'Delivered' },
    { id: 2, date: '2023-10-22', product: 'Basmati Rice', quantity: '100 kg', amount: '₹6,000', status: 'Delivered' },
    { id: 3, date: '2023-10-25', product: 'Organic Tomatoes', quantity: '50 kg', amount: '₹2,000', status: 'In Transit' },
  ];

  // Ensure this dashboard is only accessible to retailers
  useEffect(() => {
    if (!loading && userRole !== UserRole.RETAILER && userRole !== UserRole.ADMIN) {
      navigate('/', { replace: true });
    } else if (!loading) {
      checkWalletConnection();
      loadInventory();
      loadPurchaseHistory();
    }
  }, [userRole, loading, navigate]);

  // Check wallet connection
  const checkWalletConnection = async () => {
    try {
      const account = await blockchainService.getCurrentAccount();
      setWalletConnected(!!account);
    } catch (error) {
      console.error('Error checking wallet connection:', error);
      setWalletConnected(false);
    } finally {
      setIsLoading(false);
    }
  };

  // Connect wallet
  const connectWallet = async () => {
    try {
      await blockchainService.connectWallet();
      setWalletConnected(true);
      toast({
        title: 'Wallet Connected',
        description: 'Your wallet has been connected successfully',
      });
    } catch (error) {
      console.error('Error connecting wallet:', error);
      toast({
        title: 'Error',
        description: 'Failed to connect wallet',
        variant: 'destructive',
      });
    }
  };

  // Load inventory (in a real app, this would come from the blockchain/backend)
  const loadInventory = async () => {
    try {
      setIsLoading(true);
      // In a real app, fetch inventory from the blockchain/backend
      // For now, use mock data
      setInventory(mockInventory);
    } catch (error) {
      console.error('Error loading inventory:', error);
      toast({
        title: 'Error',
        description: 'Failed to load inventory',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Load purchase history (in a real app, this would come from the blockchain/backend)
  const loadPurchaseHistory = async () => {
    try {
      setIsLoading(true);
      // In a real app, fetch purchase history from the blockchain/backend
      // For now, use mock data
      setPurchaseHistory(mockPurchaseHistory);
    } catch (error) {
      console.error('Error loading purchase history:', error);
      toast({
        title: 'Error',
        description: 'Failed to load purchase history',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Verify product
  const verifyProduct = async (productId: number) => {
    try {
      setIsLoading(true);
      const result = await blockchainService.verifyProduct(productId);
      
      setVerificationResult({
        valid: true,
        message: 'Product verified successfully',
        product: result.product,
        owners: result.owners
      });
      
      setIsVerifyDialogOpen(true);
    } catch (error) {
      console.error('Error verifying product:', error);
      setVerificationResult({
        valid: false,
        message: 'Failed to verify product. It may not exist on the blockchain.'
      });
      setIsVerifyDialogOpen(true);
    } finally {
      setIsLoading(false);
    }
  };

  // Handle QR code scan
  const handleQRScan = (data: string) => {
    try {
      const productId = parseInt(data.split('_')[1]);
      if (!isNaN(productId)) {
        verifyProduct(productId);
      }
    } catch (error) {
      console.error('Error processing QR code:', error);
    }
  };

  // Handle purchase
  const handlePurchase = (batchId: number, price: string) => {
    // In a real app, this would create a purchase transaction on the blockchain
    toast({
      title: 'Purchase Initiated',
      description: `Purchase request for batch #${batchId} has been initiated.`,
    });
    setIsPaymentDialogOpen(false);
  };

  // Get status badge
  const getStatusBadge = (status: string) => {
    const statusMap: Record<string, { text: string; variant: 'default' | 'secondary' | 'destructive' | 'outline' }> = {
      'in-stock': { text: 'In Stock', variant: 'default' },
      'low-stock': { text: 'Low Stock', variant: 'secondary' },
      'out-of-stock': { text: 'Out of Stock', variant: 'destructive' },
      'Delivered': { text: 'Delivered', variant: 'default' },
      'In Transit': { text: 'In Transit', variant: 'secondary' },
      'Pending': { text: 'Pending', variant: 'outline' },
    };

    const statusInfo = statusMap[status] || { text: status, variant: 'outline' as const };
    
    return (
      <Badge variant={statusInfo.variant}>
        {statusInfo.text}
      </Badge>
    );
  };

  // Loading state
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin" />
        <span className="ml-2">Loading...</span>
      </div>
    );
  }

  // Wallet not connected state
  if (!walletConnected) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <h2 className="text-2xl font-bold mb-4">Connect Your Wallet</h2>
        <p className="text-muted-foreground mb-6 text-center">
          Please connect your wallet to access the Retailer Dashboard
        </p>
        <Button onClick={connectWallet} disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Connecting...
            </>
          ) : (
            'Connect Wallet'
          )}
        </Button>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-blue-50 p-6">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-green-800">Retailer Dashboard</h1>
            <p className="text-gray-600">Welcome back, {profile?.first_name} {profile?.last_name}</p>
          </div>
          <Button 
            className="mt-4 md:mt-0 bg-green-600 hover:bg-green-700" 
            onClick={() => setIsQRScannerOpen(true)}
            disabled={isLoading}
          >
            <QrCode className="mr-2 h-4 w-4" /> Scan Product
          </Button>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Inventory</CardTitle>
              <Package className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{inventory.length}</div>
              <p className="text-xs text-muted-foreground">Products in stock</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Low Stock</CardTitle>
              <ShoppingCart className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {inventory.filter(item => item.status === 'low-stock').length}
              </div>
              <p className="text-xs text-muted-foreground">Items need restocking</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Monthly Sales</CardTitle>
              <TrendingUp className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">₹1.8L</div>
              <p className="text-xs text-muted-foreground">+12% from last month</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Farmer Share</CardTitle>
              <DollarSign className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">80%</div>
              <p className="text-xs text-muted-foreground">Average to farmers</p>
            </CardContent>
          </Card>
        </div>

        <Tabs defaultValue="inventory" className="mb-8">
          <TabsList className="grid w-full grid-cols-2 mb-4">
            <TabsTrigger value="inventory">Inventory</TabsTrigger>
            <TabsTrigger value="purchases">Purchase History</TabsTrigger>
          </TabsList>
          
          <TabsContent value="inventory" className="space-y-4">
            <Card>
              <CardHeader>
                <div className="flex justify-between items-center">
                  <div>
                    <CardTitle>Inventory Management</CardTitle>
                    <CardDescription>Manage your current stock and product information</CardDescription>
                  </div>
                  <div className="flex space-x-2">
                    <Input 
                      placeholder="Search products..." 
                      className="max-w-[200px]"
                      // Add search functionality
                    />
                    <Select>
                      <SelectTrigger className="w-[180px]">
                        <SelectValue placeholder="Filter by status" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Items</SelectItem>
                        <SelectItem value="in-stock">In Stock</SelectItem>
                        <SelectItem value="low-stock">Low Stock</SelectItem>
                        <SelectItem value="out-of-stock">Out of Stock</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left py-3 px-2">Product</th>
                        <th className="text-left py-3 px-2">Quantity</th>
                        <th className="text-left py-3 px-2">Source</th>
                        <th className="text-left py-3 px-2">Purchase Date</th>
                        <th className="text-left py-3 px-2">Status</th>
                        <th className="text-left py-3 px-2">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {inventory.map((item) => (
                        <tr key={item.id} className="border-b hover:bg-muted/50">
                          <td className="py-3 px-2 font-medium">{item.product}</td>
                          <td className="py-3 px-2">{item.quantity}</td>
                          <td className="py-3 px-2 text-sm text-muted-foreground">
                            {item.source}
                          </td>
                          <td className="py-3 px-2">{item.purchaseDate}</td>
                          <td className="py-3 px-2">
                            {getStatusBadge(item.status)}
                          </td>
                          <td className="py-3 px-2">
                            <div className="flex space-x-2">
                              <Button 
                                variant="outline" 
                                size="sm"
                                onClick={() => {
                                  setCurrentProduct(item);
                                  verifyProduct(item.batchId);
                                }}
                              >
                                <ShieldCheck className="h-3 w-3 mr-1" /> Verify
                              </Button>
                              <Button 
                                variant="outline" 
                                size="sm"
                                onClick={() => {
                                  // View details
                                }}
                              >
                                Details
                              </Button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="purchases" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Purchase History</CardTitle>
                <CardDescription>Track your past and current purchases</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left py-3 px-2">Date</th>
                        <th className="text-left py-3 px-2">Product</th>
                        <th className="text-left py-3 px-2">Quantity</th>
                        <th className="text-left py-3 px-2">Amount</th>
                        <th className="text-left py-3 px-2">Status</th>
                        <th className="text-left py-3 px-2">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {purchaseHistory.map((purchase) => (
                        <tr key={purchase.id} className="border-b hover:bg-muted/50">
                          <td className="py-3 px-2">{purchase.date}</td>
                          <td className="py-3 px-2 font-medium">{purchase.product}</td>
                          <td className="py-3 px-2">{purchase.quantity}</td>
                          <td className="py-3 px-2">{purchase.amount}</td>
                          <td className="py-3 px-2">
                            {getStatusBadge(purchase.status)}
                          </td>
                          <td className="py-3 px-2">
                            <Button variant="ghost" size="sm">
                              View Details
                            </Button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>

      {/* QR Code Scanner Dialog */}
      <Dialog open={isQRScannerOpen} onOpenChange={setIsQRScannerOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Scan Product QR Code</DialogTitle>
            <DialogDescription>
              Scan a product's QR code to verify its authenticity and view details.
            </DialogDescription>
          </DialogHeader>
          <div className="py-4">
            <div className="border-2 border-dashed rounded-lg p-8 text-center">
              <QrCode className="h-16 w-16 mx-auto mb-4 text-muted-foreground" />
              <p className="text-sm text-muted-foreground">
                {isLoading ? 'Processing...' : 'Position the QR code in the camera view'}
              </p>
              {isLoading && <Loader2 className="h-8 w-8 animate-spin mx-auto mt-4" />}
            </div>
            <div className="mt-4 text-center">
              <Button 
                variant="outline" 
                onClick={() => {
                  // Simulate a scan for demo purposes
                  handleQRScan('product_123');
                }}
                disabled={isLoading}
              >
                Simulate Scan
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Verification Result Dialog */}
      <Dialog open={isVerifyDialogOpen} onOpenChange={setIsVerifyDialogOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              {verificationResult?.valid ? (
                <>
                  <ShieldCheck className="h-5 w-5 text-green-500 mr-2" />
                  Product Verified
                </>
              ) : (
                'Verification Failed'
              )}
            </DialogTitle>
            <DialogDescription>
              {verificationResult?.message}
            </DialogDescription>
          </DialogHeader>
          
          {verificationResult?.product && (
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <h4 className="font-medium">Product Details</h4>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div className="text-muted-foreground">Name:</div>
                  <div>{verificationResult.product.name}</div>
                  
                  <div className="text-muted-foreground">Product ID:</div>
                  <div>{verificationResult.product.id}</div>
                  
                  <div className="text-muted-foreground">Farmer:</div>
                  <div className="truncate">{verificationResult.product.farmer}</div>
                  
                  <div className="text-muted-foreground">Current Owner:</div>
                  <div className="truncate">{verificationResult.product.currentOwner}</div>
                  
                  <div className="text-muted-foreground">Status:</div>
                  <div>{blockchainService.getProductStatus(verificationResult.product.status)}</div>
                </div>
              </div>
              
              {verificationResult.owners && verificationResult.owners.length > 0 && (
                <div className="space-y-2">
                  <h4 className="font-medium">Ownership History</h4>
                  <div className="space-y-1 text-sm">
                    {verificationResult.owners.map((owner, idx) => (
                      <div key={idx} className="flex items-center">
                        <div className="w-4 h-4 rounded-full bg-green-500 mr-2"></div>
                        <span className="truncate">{owner}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
          
          <DialogFooter>
            <Button onClick={() => setIsVerifyDialogOpen(false)}>Close</Button>
            {verificationResult?.valid && (
              <Button 
                variant="default"
                onClick={() => {
                  setIsVerifyDialogOpen(false);
                  // Navigate to product details or take other actions
                }}
              >
                View Full Details
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Payment Dialog */}
      <Dialog open={isPaymentDialogOpen} onOpenChange={setIsPaymentDialogOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Complete Purchase</DialogTitle>
            <DialogDescription>
              Review and confirm your purchase details
            </DialogDescription>
          </DialogHeader>
          
          {currentProduct && (
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <h4 className="font-medium">{currentProduct.product}</h4>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div className="text-muted-foreground">Quantity:</div>
                  <div>{currentProduct.quantity}</div>
                  
                  <div className="text-muted-foreground">Price:</div>
                  <div>{currentProduct.price}</div>
                  
                  <div className="text-muted-foreground">Farmer Share:</div>
                  <div>{currentProduct.farmerShare}</div>
                  
                  <div className="text-muted-foreground font-medium">Total:</div>
                  <div className="font-medium">
                    {currentProduct.price}
                  </div>
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="payment-method">Payment Method</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select payment method" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="crypto">Cryptocurrency</SelectItem>
                    <SelectItem value="bank">Bank Transfer</SelectItem>
                    <SelectItem value="upi">UPI</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div className="pt-4">
                <Button 
                  className="w-full" 
                  onClick={() => handlePurchase(currentProduct.batchId, currentProduct.price)}
                  disabled={isLoading}
                >
                  {isLoading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Processing...
                    </>
                  ) : (
                    'Confirm Purchase'
                  )}
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default RetailerDashboard;
