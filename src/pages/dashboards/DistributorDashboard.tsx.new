import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { UserRole } from '@/lib/types';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { cn } from '@/lib/utils';
import { Package, TrendingUp, QrCode, Truck, BarChart3, DollarSign, ShieldCheck, Search, Loader2 } from 'lucide-react';
import { blockchainService, type Product, type Batch } from '@/lib/blockchain';
import { QRCodeGenerator } from '@/components/QRCodeGenerator';
import { toast } from '@/components/ui/use-toast';

interface ProduceItem {
  id: number;
  name: string;
  farmer: string;
  quantity: string;
  harvestDate: string;
  quality: string;
  price: string;
  verified: boolean;
}

const DistributorDashboard = () => {
  const { user, profile, userRole, loading } = useAuth();
  const navigate = useNavigate();
  
  // State
  const [isVerifyDialogOpen, setIsVerifyDialogOpen] = useState(false);
  const [isQRScannerOpen, setIsQRScannerOpen] = useState(false);
  const [currentProduce, setCurrentProduce] = useState<ProduceItem | null>(null);
  const [batches, setBatches] = useState<Batch[]>([]);
  const [availableProduce, setAvailableProduce] = useState<ProduceItem[]>([]);
  const [procuredProduce, setProcuredProduce] = useState<any[]>([]);
  const [walletConnected, setWalletConnected] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [verificationResult, setVerificationResult] = useState<{
    valid: boolean;
    message: string;
    product?: Product;
    owners?: string[];
  } | null>(null);
  
  // Mock data for demonstration
  const mockAvailableProduce: ProduceItem[] = [
    { id: 1, name: 'Wheat', farmer: 'Ramesh Kumar', quantity: '500 kg', harvestDate: '2023-10-15', quality: 'Premium', price: '₹20/kg', verified: true },
    { id: 2, name: 'Rice', farmer: 'Suresh Patel', quantity: '300 kg', harvestDate: '2023-10-10', quality: 'Standard', price: '₹35/kg', verified: true },
    { id: 3, name: 'Tomatoes', farmer: 'Mahesh Singh', quantity: '100 kg', harvestDate: '2023-10-05', quality: 'Premium', price: '₹15/kg', verified: false },
  ];

  const mockProcuredProduce = [
    { id: 101, name: 'Wheat', farmer: 'Dinesh Sharma', quantity: '800 kg', purchaseDate: '2023-09-25', status: 'In Storage', destination: 'Central Warehouse' },
    { id: 102, name: 'Potatoes', farmer: 'Rajesh Verma', quantity: '500 kg', purchaseDate: '2023-09-20', status: 'In Transit', destination: 'City Market' },
  ];

  // Ensure this dashboard is only accessible to distributors
  useEffect(() => {
    if (!loading && userRole !== UserRole.DISTRIBUTOR && userRole !== UserRole.ADMIN) {
      navigate('/', { replace: true });
    } else if (!loading) {
      checkWalletConnection();
      loadBatches();
      // Load mock data for now
      setAvailableProduce(mockAvailableProduce);
      setProcuredProduce(mockProcuredProduce);
    }
  }, [userRole, loading, navigate]);

  // Check wallet connection
  const checkWalletConnection = async () => {
    try {
      const account = await blockchainService.getCurrentAccount();
      setWalletConnected(!!account);
    } catch (error) {
      console.error('Error checking wallet connection:', error);
      setWalletConnected(false);
    } finally {
      setIsLoading(false);
    }
  };

  // Connect wallet
  const connectWallet = async () => {
    try {
      await blockchainService.connectWallet();
      setWalletConnected(true);
      toast({
        title: 'Wallet Connected',
        description: 'Your wallet has been connected successfully',
      });
    } catch (error) {
      console.error('Error connecting wallet:', error);
      toast({
        title: 'Error',
        description: 'Failed to connect wallet',
        variant: 'destructive',
      });
    }
  };

  // Load batches from blockchain
  const loadBatches = async () => {
    try {
      setIsLoading(true);
      // In a real app, fetch batches from the blockchain
      // For now, we'll use mock data
      const mockBatches: Batch[] = [
        {
          id: 1,
          productIds: [1, 2, 3],
          currentHandler: '0x123...',
          createdAt: Math.floor(Date.now() / 1000) - 86400, // 1 day ago
          location: 'Central Warehouse',
          status: 1 // 1 = In Storage
        },
        {
          id: 2,
          productIds: [4, 5],
          currentHandler: '0x123...',
          createdAt: Math.floor(Date.now() / 1000) - 172800, // 2 days ago
          location: 'In Transit to Retailer',
          status: 2 // 2 = In Transit
        }
      ];
      setBatches(mockBatches);
    } catch (error) {
      console.error('Error loading batches:', error);
      toast({
        title: 'Error',
        description: 'Failed to load batches',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Verify product
  const verifyProduct = async (productId: number) => {
    try {
      setIsLoading(true);
      const result = await blockchainService.verifyProduct(productId);
      
      setVerificationResult({
        valid: true,
        message: 'Product verified successfully',
        product: result.product,
        owners: result.owners
      });
      
      setIsVerifyDialogOpen(true);
    } catch (error) {
      console.error('Error verifying product:', error);
      setVerificationResult({
        valid: false,
        message: 'Failed to verify product. It may not exist on the blockchain.'
      });
      setIsVerifyDialogOpen(true);
    } finally {
      setIsLoading(false);
    }
  };

  // Update batch location
  const updateBatchLocation = async (batchId: number, newLocation: string) => {
    try {
      setIsLoading(true);
      await blockchainService.updateBatchLocation(batchId, newLocation);
      
      // Update local state
      setBatches(batches.map(batch => 
        batch.id === batchId ? { ...batch, location: newLocation } : batch
      ));
      
      toast({
        title: 'Success',
        description: 'Batch location updated successfully',
      });
    } catch (error) {
      console.error('Error updating batch location:', error);
      toast({
        title: 'Error',
        description: 'Failed to update batch location',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Handle QR code scan
  const handleQRScan = (data: string) => {
    try {
      const productId = parseInt(data.split('_')[1]);
      if (!isNaN(productId)) {
        verifyProduct(productId);
      }
    } catch (error) {
      console.error('Error processing QR code:', error);
    }
  };

  const handleProcurement = (produceId: number, action: 'accept' | 'reject') => {
    // In a real app, this would update the database and create a transaction
    toast({
      title: action === 'accept' ? 'Produce Accepted' : 'Produce Rejected',
      description: `Produce ${action === 'accept' ? 'accepted' : 'rejected'} successfully!`,
    });
  };

  const assignTransport = (batchId: number) => {
    // In a real app, this would open a dialog to assign transport
    const newLocation = 'In Transit to Retailer';
    updateBatchLocation(batchId, newLocation);
  };

  const scanQRCode = () => {
    setIsQRScannerOpen(true);
  };

  const getStatusBadge = (status: number) => {
    const statusText = blockchainService.getProductStatus(status);
    return (
      <Badge 
        variant="outline" 
        className={cn(
          status === 1 && 'border-blue-500 text-blue-500', // In Storage
          status === 2 && 'border-orange-500 text-orange-500', // In Transit
          status === 3 && 'border-green-500 text-green-500', // Delivered
        )}
      >
        {statusText}
      </Badge>
    );
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin" />
        <span className="ml-2">Loading...</span>
      </div>
    );
  }

  if (!walletConnected) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <h2 className="text-2xl font-bold mb-4">Connect Your Wallet</h2>
        <p className="text-muted-foreground mb-6 text-center">
          Please connect your wallet to access the Distributor Dashboard
        </p>
        <Button onClick={connectWallet} disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Connecting...
            </>
          ) : (
            'Connect Wallet'
          )}
        </Button>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 p-6">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-blue-800">Distributor Dashboard</h1>
            <p className="text-gray-600">Welcome back, {profile?.first_name} {profile?.last_name}</p>
          </div>
          <Button 
            className="mt-4 md:mt-0 bg-blue-600 hover:bg-blue-700" 
            onClick={scanQRCode}
            disabled={isLoading}
          >
            <QrCode className="mr-2 h-4 w-4" /> Scan QR Code
          </Button>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Available Batches</CardTitle>
              <Package className="h-4 w-4 text-blue-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{batches.length}</div>
              <p className="text-xs text-muted-foreground">In your inventory</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">In Transit</CardTitle>
              <Truck className="h-4 w-4 text-blue-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {batches.filter(b => b.status === 2).length}
              </div>
              <p className="text-xs text-muted-foreground">Batches in transit</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Products</CardTitle>
              <TrendingUp className="h-4 w-4 text-blue-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {batches.reduce((sum, batch) => sum + batch.productIds.length, 0)}
              </div>
              <p className="text-xs text-muted-foreground">Products in inventory</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">This Month</CardTitle>
              <DollarSign className="h-4 w-4 text-blue-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">₹1.2M</div>
              <p className="text-xs text-muted-foreground">Total procurement</p>
            </CardContent>
          </Card>
        </div>

        <Tabs defaultValue="inventory" className="mb-8">
          <TabsList className="grid w-full grid-cols-2 mb-4">
            <TabsTrigger value="inventory">Inventory Management</TabsTrigger>
            <TabsTrigger value="logistics">Logistics</TabsTrigger>
          </TabsList>
          
          <TabsContent value="inventory" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Inventory Overview</CardTitle>
                <CardDescription>Manage your current inventory and batches</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left py-3 px-2">Batch ID</th>
                        <th className="text-left py-3 px-2">Products</th>
                        <th className="text-left py-3 px-2">Location</th>
                        <th className="text-left py-3 px-2">Status</th>
                        <th className="text-left py-3 px-2">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {batches.map((batch) => (
                        <tr key={batch.id} className="border-b hover:bg-muted/50">
                          <td className="py-3 px-2 font-medium">#{batch.id}</td>
                          <td className="py-3 px-2">
                            <div className="flex flex-wrap gap-1">
                              {batch.productIds.map((id, idx) => (
                                <Badge key={idx} variant="outline" className="text-xs">
                                  {id}
                                </Badge>
                              ))}
                            </div>
                          </td>
                          <td className="py-3 px-2">{batch.location}</td>
                          <td className="py-3 px-2">
                            {getStatusBadge(batch.status)}
                          </td>
                          <td className="py-3 px-2">
                            {batch.status === 1 && (
                              <Button 
                                variant="outline" 
                                size="sm"
                                onClick={() => assignTransport(batch.id)}
                                disabled={isLoading}
                              >
                                <Truck className="h-3 w-3 mr-1" /> Ship Batch
                              </Button>
                            )}
                            {batch.status === 2 && (
                              <Button 
                                variant="outline" 
                                size="sm"
                                disabled={isLoading}
                              >
                                Track Shipment
                              </Button>
                            )}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="logistics" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Logistics Management</CardTitle>
                <CardDescription>Track and manage shipments</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {batches.filter(b => b.status === 2).map(batch => (
                    <div key={batch.id} className="border rounded-lg p-4">
                      <div className="flex justify-between items-center">
                        <div>
                          <h4 className="font-medium">Batch #{batch.id}</h4>
                          <p className="text-sm text-muted-foreground">
                            {batch.productIds.length} products • {batch.location}
                          </p>
                        </div>
                        <div className="flex space-x-2">
                          <Button variant="outline" size="sm">
                            Update Location
                          </Button>
                          <Button variant="outline" size="sm">
                            View Details
                          </Button>
                        </div>
                      </div>
                      <div className="mt-4 pt-4 border-t">
                        <div className="flex items-center justify-between text-sm">
                          <div className="text-muted-foreground">Status</div>
                          <div>{getStatusBadge(batch.status)}</div>
                        </div>
                        <div className="flex items-center justify-between text-sm mt-2">
                          <div className="text-muted-foreground">Last Updated</div>
                          <div>{new Date(batch.createdAt * 1000).toLocaleString()}</div>
                        </div>
                      </div>
                    </div>
                  ))}
                  {batches.filter(b => b.status === 2).length === 0 && (
                    <div className="text-center py-8 text-muted-foreground">
                      <Package className="h-12 w-12 mx-auto mb-2 opacity-20" />
                      <p>No shipments in transit</p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>

      {/* QR Code Scanner Dialog */}
      <Dialog open={isQRScannerOpen} onOpenChange={setIsQRScannerOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Scan Product QR Code</DialogTitle>
            <DialogDescription>
              Scan a product's QR code to verify its authenticity and view details.
            </DialogDescription>
          </DialogHeader>
          <div className="py-4">
            <div className="border-2 border-dashed rounded-lg p-8 text-center">
              <QrCode className="h-16 w-16 mx-auto mb-4 text-muted-foreground" />
              <p className="text-sm text-muted-foreground">
                {isLoading ? 'Processing...' : 'Position the QR code in the camera view'}
              </p>
              {isLoading && <Loader2 className="h-8 w-8 animate-spin mx-auto mt-4" />}
            </div>
            <div className="mt-4 text-center">
              <Button 
                variant="outline" 
                onClick={() => {
                  // Simulate a scan for demo purposes
                  handleQRScan('product_123');
                }}
                disabled={isLoading}
              >
                Simulate Scan
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Verification Result Dialog */}
      <Dialog open={isVerifyDialogOpen} onOpenChange={setIsVerifyDialogOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>
              {verificationResult?.valid ? 'Verification Successful' : 'Verification Failed'}
            </DialogTitle>
            <DialogDescription>
              {verificationResult?.message}
            </DialogDescription>
          </DialogHeader>
          {verificationResult?.product && (
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <h4 className="font-medium">Product Details</h4>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div className="text-muted-foreground">Name:</div>
                  <div>{verificationResult.product.name}</div>
                  
                  <div className="text-muted-foreground">Product ID:</div>
                  <div>{verificationResult.product.id}</div>
                  
                  <div className="text-muted-foreground">Farmer:</div>
                  <div className="truncate">{verificationResult.product.farmer}</div>
                  
                  <div className="text-muted-foreground">Current Owner:</div>
                  <div className="truncate">{verificationResult.product.currentOwner}</div>
                  
                  <div className="text-muted-foreground">Status:</div>
                  <div>{blockchainService.getProductStatus(verificationResult.product.status)}</div>
                </div>
              </div>
              
              {verificationResult.owners && verificationResult.owners.length > 0 && (
                <div className="space-y-2">
                  <h4 className="font-medium">Ownership History</h4>
                  <div className="space-y-1 text-sm">
                    {verificationResult.owners.map((owner, idx) => (
                      <div key={idx} className="flex items-center">
                        <div className="w-4 h-4 rounded-full bg-blue-500 mr-2"></div>
                        <span className="truncate">{owner}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
          <DialogFooter>
            <Button onClick={() => setIsVerifyDialogOpen(false)}>Close</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default DistributorDashboard;
